# various utilities

def wgen256{F} = {
  def r{T} = 0
  def r{T & width{T}==256} = F{eltype{T}}
  def r{T,w} = 0
  def r{T,w & width{T}==256} = F{eltype{T}} & (width{eltype{T}}==w)
  r
}
def w256{T} = width{T}==256
def w256{T, w} = 0
def w256{T, w & width{T}==256 & width{eltype{T}}==w} = 1
def w256i = wgen256{{T} => isint{T}}
def w256s = wgen256{{T} => isint{T} &   issigned{T}}
def w256u = wgen256{{T} => isint{T} & isunsigned{T}}
def w256f = wgen256{{T} => isfloat{T}}


def cast_vp{T, x & w256{T}} = emit{*T, '(void*)', x}
def cast_v{R, x:S & w256i{R   } & w256{S}} = emit{R, '(__m256i)', x}
def cast_v{R, x:S & w256f{R,32} & w256{S}} = emit{R, '(__m256)',  x}
def cast_v{R, x:S & w256f{R,64} & w256{S}} = emit{R, '(__m256d)', x}
def v2i{x:T & w256{T}} = cast_v{[32]u8, x} # for compact casting for the annoying intrinsic type system
def v2f{x:T & w256{T}} = cast_v{[8]f32, x}
def v2d{x:T & w256{T}} = cast_v{[4]f64, x}

def ty_vu{T & w256s{T}} = [vcount{T}](ty_iu{eltype{T}})
def ty_vs{T & w256u{T}} = [vcount{T}](ty_is{eltype{T}})
def forv{T & w256{T}} = forc{{v}=>cast_vp{T,v}}

# load & store
def load {a:T, n & w256i{eltype{T}   }} = emit{eltype{T}, '_mm256_loadu_si256',          a+n}
def loada{a:T, n & w256i{eltype{T}   }} = emit{eltype{T}, '_mm256_load_si256',           a+n}
def load {a:T, n & w256f{eltype{T},64}} = emit{eltype{T}, '_mm256_loadu_pd', cast_p{f64, a+n}}
def loada{a:T, n & w256f{eltype{T},64}} = emit{eltype{T}, '_mm256_load_pd',  cast_p{f64, a+n}}
def load {a:T, n & w256f{eltype{T},32}} = emit{eltype{T}, '_mm256_loadu_ps', cast_p{f32, a+n}}
def loada{a:T, n & w256f{eltype{T},32}} = emit{eltype{T}, '_mm256_load_ps',  cast_p{f32, a+n}}
def store {a:T, n, v & w256i{eltype{T}   }} = emit{void, '_mm256_storeu_si256',          a+n, v}
def storea{a:T, n, v & w256i{eltype{T}   }} = emit{void, '_mm256_store_si256',           a+n, v}
def store {a:T, n, v & w256f{eltype{T},64}} = emit{void, '_mm256_storeu_pd', cast_p{f64, a+n}, v}
def storea{a:T, n, v & w256f{eltype{T},64}} = emit{void, '_mm256_store_pd',  cast_p{f64, a+n}, v}
def store {a:T, n, v & w256f{eltype{T},32}} = emit{void, '_mm256_storeu_ps', cast_p{f32, a+n}, v}
def storea{a:T, n, v & w256f{eltype{T},32}} = emit{void, '_mm256_store_ps',  cast_p{f32, a+n}, v}

# broadcast
def broadcast{T, v & w256i{T,  8}} = emit{T, '_mm256_set1_epi8',  ext{eltype{T},v}}
def broadcast{T, v & w256i{T, 16}} = emit{T, '_mm256_set1_epi16', ext{eltype{T},v}}
def broadcast{T, v & w256i{T, 32}} = emit{T, '_mm256_set1_epi32', ext{eltype{T},v}}
def broadcast{T, v & w256i{T, 64}} = emit{T, '_mm256_set1_epi64x',ext{eltype{T},v}}
def broadcast{T, v & w256f{T, 64}} = emit{T, '_mm256_set1_pd', v}
def broadcast{T, v & w256f{T, 32}} = emit{T, '_mm256_set1_ps', v}

def make{T==[4]f64,a,b,c,d} = emit{T,'_mm256_setr_pd',a,b,c,d}
def make{T==[8]f32,a,b,c,d,e,f,g,h} = emit{T,'_mm256_setr_ps',a,b,c,d,e,f,g,h}

def makeGen{T,s,x} = apply{emit, merge{tup{T,s}, each{{c}=>ext{eltype{T},c}, x}}}
def make{T,a,b,c,d & w256i{T}} = makeGen{T, '_mm256_setr_epi64x', tup{a,b,c,d}}
def make{T,a,b,c,d,e,f,g,h & w256i{T}} = makeGen{T, '_mm256_setr_epi32', tup{a,b,c,d,e,f,g,h}}
def make{T,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p & w256i{T}} = makeGen{T, '_mm256_setr_epi16', tup{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p}}
def make{T,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P & w256i{T}} = makeGen{T, '_mm256_setr_epi8', tup{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P}}

def iota{T & w256{T,64}} = make{T,0,1,2,3}
def iota{T & w256{T,32}} = make{T,0,1,2,3,4,5,6,7}
def iota{T & w256{T,16}} = make{T,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}
def iota{T & w256{T,8}} = make{T,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31}

def __xor{a:T, b:T & w256i{T}} = cast_v{T, emit{[8]f32, '_mm256_xor_ps', v2f{a}, v2f{b}}}
def __and{a:T, b:T & w256i{T}} = cast_v{T, emit{[8]f32, '_mm256_and_ps', v2f{a}, v2f{b}}}
def __or {a:T, b:T & w256i{T}} = cast_v{T, emit{[8]f32, '_mm256_or_ps',  v2f{a}, v2f{b}}}

def __not{a:T & w256u{T}} = a ^ broadcast{T, ~cast{eltype{T},0}}

# f64 comparison
def f64cmpAVX{a,b,n} = cast_v{[4]u64, emit{[4]f64, '_mm256_cmp_pd', a, b, n}}
def __eq{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b, 0}
def __ne{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b, 4}
def __gt{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b,30}
def __ge{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b,29}
def __lt{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b,17}
def __le{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b,18}

# f32 arith
def __add{a:T,b:T & T==[8]f32} = emit{T, '_mm256_add_ps', a, b}
def __sub{a:T,b:T & T==[8]f32} = emit{T, '_mm256_sub_ps', a, b}
def __mul{a:T,b:T & T==[8]f32} = emit{T, '_mm256_mul_ps', a, b}
def __div{a:T,b:T & T==[8]f32} = emit{T, '_mm256_div_ps', a, b}
def   max{a:T,b:T & T==[8]f32} = emit{T, '_mm256_max_ps', a, b}
def   min{a:T,b:T & T==[8]f32} = emit{T, '_mm256_min_ps', a, b}
def  sqrt{a:T,b:T & T==[8]f32} = emit{T, '_mm256_sqrt_ps', a, b}
def   abs{a:[8]f32} = emit{[8]f32, '_mm256_and_ps', a, v2f{broadcast{[8]u32, 0x7FFFFFFF}}}
def floor{a:[8]f32} = emit{[8]f32, '_mm256_floor_ps', a}
def  ceil{a:[8]f32} = emit{[8]f32, '_mm256_ceil_ps', a}

# f64 arith
def __add{a:T,b:T & T==[4]f64} = emit{T, '_mm256_add_pd', a, b}
def __sub{a:T,b:T & T==[4]f64} = emit{T, '_mm256_sub_pd', a, b}
def __mul{a:T,b:T & T==[4]f64} = emit{T, '_mm256_mul_pd', a, b}
def __div{a:T,b:T & T==[4]f64} = emit{T, '_mm256_div_pd', a, b}
def   max{a:T,b:T & T==[4]f64} = emit{T, '_mm256_max_pd', a, b}
def   min{a:T,b:T & T==[4]f64} = emit{T, '_mm256_min_pd', a, b}
def  sqrt{a:T,b:T & T==[4]f64} = emit{T, '_mm256_sqrt_pd', a, b}
def   abs{a:[4]f64} = emit{[4]f64, '_mm256_and_pd', a, v2d{broadcast{[4]u64, (cast{u64,1}<<63)-1}}}
def floor{a:[4]f64} = emit{[4]f64, '_mm256_floor_pd', a}
def  ceil{a:[4]f64} = emit{[4]f64, '_mm256_ceil_pd', a}

# conversion
def cvt_f2i{x:[8]f32} = emit{[8]i32, '_mm256_cvtps_epi32', x}
def cvt_i2f{x:[8]i32} = emit{[8]f32, '_mm256_cvtepi32_ps', x}


# structural operations
def extract{x:T, i & w256i{T,32} & knum{i}} = emit{eltype{T}, '_mm256_extract_epi32', x, i}
def extract{x:T, i & w256i{T,64} & knum{i}} = emit{eltype{T}, '_mm256_extract_epi64', x, i}
def extract{x:T, i & w256f{T,64} & knum{i}} = emit{f64, '_mm256_cvtsd_f64', emit{T, '_mm256_permute4x64_pd', x, i}}
def extract{x:T, i & w256f{T,32} & knum{i}} = {
  t:= emit{[4]f32, '_mm256_extractf128_ps', x, i>>2}
  emit{f32, '_mm_cvtss_f32', emit{[4]f32, '_mm_shuffle_ps', t, t, i}}
}

def insert{x:T, i, v & w256i{T, 8} & knum{i}} = emit{T, '_mm256_insert_epi8',  x, v, i}
def insert{x:T, i, v & w256i{T,16} & knum{i}} = emit{T, '_mm256_insert_epi16', x, v, i}
def insert{x:T, i, v & w256i{T,32} & knum{i}} = emit{T, '_mm256_insert_epi32', x, v, i}
def insert{x:T, i, v & w256i{T,64} & knum{i}} = emit{T, '_mm256_insert_epi64', x, v, i}

# mixed-width operations
def half{x:T, i & w256{T} & knum{i}} = cast_v{[vcount{T}/2](eltype{T}), emit{[8]i16, '_mm256_extracti128_si256', v2i{x}, i}}
def pair{a:T,b:T & width{T}==128} = cast_v{[vcount{T}*2](eltype{T}), emit{[8]i32, '_mm256_setr_m128i', a, b}}
def pair{x} = pair{tupsel{0,x},tupsel{1,x}}

# mask stuff
def getmask{x:T & w256{T, 32}} = emit{u8, '_mm256_movemask_ps', v2f{x}}
def getmask{x:T & w256{T, 64}} = emit{u8, '_mm256_movemask_pd', v2d{x}}
def any{x:T & w256i{T}} = getmask{x} != 0 # assumes elements of x all have equal bits (avx2 utilizes this for 16 bits)
def all{x:T & w256i{T}} = getmask{x} == (1<<vcount{T})-1 # same assumption
def anyneg{x:T & w256s{T}} = getmask{x}!=0