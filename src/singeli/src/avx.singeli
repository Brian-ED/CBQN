def w256{T} = 0
def w256{T & isvec{T}} = width{T}==256

local def wgen256{F} = {
  def r{T} = 0
  def r{T & w256{T}} = F{eltype{T}}
  def r{T,w} = 0
  def r{T,w & w256{T}} = F{eltype{T}} & (width{eltype{T}}==w)
  def r{T & ~isvec{T}} = 0
  r
}
def w256{T,w} = 0
def w256{T,w & w256{T}} = width{eltype{T}}==w
def w256i = wgen256{{T} => isint{T}}
def w256s = wgen256{{T} => isint{T} &   issigned{T}}
def w256u = wgen256{{T} => isint{T} & isunsigned{T}}
def w256f = wgen256{{T} => isfloat{T}}

def v2i{x:T & w256{T}} = [32]u8 ~~ x # for compact casting for the annoying intrinsic type system
def v2f{x:T & w256{T}} = [8]f32 ~~ x
def v2d{x:T & w256{T}} = [4]f64 ~~ x

def undefPromote{T, x:X & w128{X} & w256{T}} = T~~emit{[32]u8, '_mm256_castsi128_si256', v2i{x}}
def undefPromote{T, x:X & width{T}==width{X}} = T~~x

# load & store
def load {a:T, n & w256i{eltype{T}   }} = emit{eltype{T}, '_mm256_loadu_si256',       a+n}
def loada{a:T, n & w256i{eltype{T}   }} = emit{eltype{T}, '_mm256_load_si256',        a+n}
def load {a:T, n & w256f{eltype{T},64}} = emit{eltype{T}, '_mm256_loadu_pd', *f64 ~~ (a+n)}
def loada{a:T, n & w256f{eltype{T},64}} = emit{eltype{T}, '_mm256_load_pd',  *f64 ~~ (a+n)}
def load {a:T, n & w256f{eltype{T},32}} = emit{eltype{T}, '_mm256_loadu_ps', *f32 ~~ (a+n)}
def loada{a:T, n & w256f{eltype{T},32}} = emit{eltype{T}, '_mm256_load_ps',  *f32 ~~ (a+n)}
def store {a:T, n, v & w256i{eltype{T}   }} = emit{void, '_mm256_storeu_si256',       a+n,  v}
def storea{a:T, n, v & w256i{eltype{T}   }} = emit{void, '_mm256_store_si256',        a+n,  v}
def store {a:T, n, v & w256f{eltype{T},64}} = emit{void, '_mm256_storeu_pd', *f64 ~~ (a+n), v}
def storea{a:T, n, v & w256f{eltype{T},64}} = emit{void, '_mm256_store_pd',  *f64 ~~ (a+n), v}
def store {a:T, n, v & w256f{eltype{T},32}} = emit{void, '_mm256_storeu_ps', *f32 ~~ (a+n), v}
def storea{a:T, n, v & w256f{eltype{T},32}} = emit{void, '_mm256_store_ps',  *f32 ~~ (a+n), v}

# broadcast
def broadcast{T, v & w256i{T,  8}} = emit{T, '_mm256_set1_epi8',  promote{eltype{T},v}}
def broadcast{T, v & w256i{T, 16}} = emit{T, '_mm256_set1_epi16', promote{eltype{T},v}}
def broadcast{T, v & w256i{T, 32}} = emit{T, '_mm256_set1_epi32', promote{eltype{T},v}}
def broadcast{T, v & w256i{T, 64}} = emit{T, '_mm256_set1_epi64x',promote{eltype{T},v}}
def broadcast{T, v & w256f{T, 64}} = emit{T, '_mm256_set1_pd', v}
def broadcast{T, v & w256f{T, 32}} = emit{T, '_mm256_set1_ps', v}

local def makeGen{T,s,x} = emit{T, s, ...each{{c}=>promote{eltype{T},c}, x}}
def make{T, ...xs & w256f{T,64} & tuplen{xs}== 4} = makeGen{T, '_mm256_setr_pd', xs}
def make{T, ...xs & w256f{T,32} & tuplen{xs}== 8} = makeGen{T, '_mm256_setr_ps', xs}
def make{T, ...xs & w256i{T,64} & tuplen{xs}== 4} = makeGen{T, '_mm256_setr_epi64x', xs}
def make{T, ...xs & w256i{T,32} & tuplen{xs}== 8} = makeGen{T, '_mm256_setr_epi32', xs}
def make{T, ...xs & w256i{T,16} & tuplen{xs}==16} = makeGen{T, '_mm256_setr_epi16', xs}
def make{T, ...xs & w256i{T, 8} & tuplen{xs}==32} = makeGen{T, '_mm256_setr_epi8', xs}
def make{T, x & w256{T} & istup{x}} = make{T, ...x}

def iota{T & w256{T}} = make{T, ...iota{vcount{T}}}

# bit arith
def __xor{a:T, b:T & w256{T}} = T ~~ emit{[8]f32, '_mm256_xor_ps', v2f{a}, v2f{b}}
def __and{a:T, b:T & w256{T}} = T ~~ emit{[8]f32, '_mm256_and_ps', v2f{a}, v2f{b}}
def __or {a:T, b:T & w256{T}} = T ~~ emit{[8]f32, '_mm256_or_ps',  v2f{a}, v2f{b}}
def __not{a:T & w256u{T}} = a ^ (T ** ~cast{eltype{T},0})
def andnot{a:T, b:T & w256{T}} = T ~~ emit{[8]f32, '_mm256_andnot_ps', v2f{b}, v2f{a}}

# float comparison
local def f32cmpAVX{a,b,n} = [8]u32 ~~ emit{[8]f32, '_mm256_cmp_ps', a, b, n}
local def f64cmpAVX{a,b,n} = [4]u64 ~~ emit{[4]f64, '_mm256_cmp_pd', a, b, n}
def __eq{a:T,b:T & T==[8]f32} = f32cmpAVX{a,b, 0}; def __eq{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b, 0}
def __ne{a:T,b:T & T==[8]f32} = f32cmpAVX{a,b, 4}; def __ne{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b, 4}
def __gt{a:T,b:T & T==[8]f32} = f32cmpAVX{a,b,30}; def __gt{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b,30}
def __ge{a:T,b:T & T==[8]f32} = f32cmpAVX{a,b,29}; def __ge{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b,29}
def __lt{a:T,b:T & T==[8]f32} = f32cmpAVX{a,b,17}; def __lt{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b,17}
def __le{a:T,b:T & T==[8]f32} = f32cmpAVX{a,b,18}; def __le{a:T,b:T & T==[4]f64} = f64cmpAVX{a,b,18}

# f32 arith
def __add{a:T,b:T & T==[8]f32} = emit{T, '_mm256_add_ps', a, b}
def __sub{a:T,b:T & T==[8]f32} = emit{T, '_mm256_sub_ps', a, b}
def __mul{a:T,b:T & T==[8]f32} = emit{T, '_mm256_mul_ps', a, b}
def __div{a:T,b:T & T==[8]f32} = emit{T, '_mm256_div_ps', a, b}
def   max{a:T,b:T & T==[8]f32} = emit{T, '_mm256_max_ps', a, b}
def   min{a:T,b:T & T==[8]f32} = emit{T, '_mm256_min_ps', a, b}
def  sqrt{a:T,b:T & T==[8]f32} = emit{T, '_mm256_sqrt_ps', a, b}
def   abs{a:[8]f32} = emit{[8]f32, '_mm256_and_ps', a, v2f{[8]u32 ** 0x7FFFFFFF}}
def floor{a:[8]f32} = emit{[8]f32, '_mm256_floor_ps', a}
def  ceil{a:[8]f32} = emit{[8]f32, '_mm256_ceil_ps', a}

# f64 arith
def __add{a:T,b:T & T==[4]f64} = emit{T, '_mm256_add_pd', a, b}
def __sub{a:T,b:T & T==[4]f64} = emit{T, '_mm256_sub_pd', a, b}
def __mul{a:T,b:T & T==[4]f64} = emit{T, '_mm256_mul_pd', a, b}
def __div{a:T,b:T & T==[4]f64} = emit{T, '_mm256_div_pd', a, b}
def   max{a:T,b:T & T==[4]f64} = emit{T, '_mm256_max_pd', a, b}
def   min{a:T,b:T & T==[4]f64} = emit{T, '_mm256_min_pd', a, b}
def  sqrt{a:T,b:T & T==[4]f64} = emit{T, '_mm256_sqrt_pd', a, b}
def   abs{a:[4]f64} = emit{[4]f64, '_mm256_and_pd', a, v2d{[4]u64 ** ((cast{u64,1}<<63)-1)}}
def floor{a:[4]f64} = emit{[4]f64, '_mm256_floor_pd', a}
def  ceil{a:[4]f64} = emit{[4]f64, '_mm256_ceil_pd', a}

# conversion
def half{x:T, i & w256{T} & knum{i}} = [vcount{T}/2](eltype{T}) ~~ emit{[8]i16, '_mm256_extracti128_si256', v2i{x}, i}
def half{x:T, i==0 & w256{T}}        = [vcount{T}/2](eltype{T}) ~~ emit{[8]i16, '_mm256_castsi256_si128', v2i{x}}
def pair{a:T,b:T & width{T}==128} = [vcount{T}*2](eltype{T}) ~~ emit{[8]i32, '_mm256_setr_m128i', a, b}
def pair{x} = pair{tupsel{0,x},tupsel{1,x}}

def cvt{F==i32, T==[4]f64,  a:A & w128i{A}} = emit{T, '_mm256_cvtepi32_pd', a}
def cvt{F, T, a:A & w256{A} & width{F}<width{eltype{T}}} = cvt{F, T, half{a, 0}}

# structural operations
def extract{x:T, i & w256i{T,32} & knum{i}} = emit{eltype{T}, '_mm256_extract_epi32', x, i}
def extract{x:T, i & w256i{T,64} & knum{i}} = emit{eltype{T}, '_mm256_extract_epi64', x, i}
def extract{x:T, i & w256f{T,64} & knum{i}} = emit{f64, '_mm256_cvtsd_f64', emit{T, '_mm256_permute4x64_pd', x, i}}
def extract{x:T, i & w256f{T,32} & knum{i}} = {
  t:= emit{[4]f32, '_mm256_extractf128_ps', x, i>>2}
  emit{f32, '_mm_cvtss_f32', emit{[4]f32, '_mm_shuffle_ps', t, t, i}}
}

def insert{x:T, i, v & w256i{T, 8} & knum{i}} = emit{T, '_mm256_insert_epi8',  x, v, i}
def insert{x:T, i, v & w256i{T,16} & knum{i}} = emit{T, '_mm256_insert_epi16', x, v, i}
def insert{x:T, i, v & w256i{T,32} & knum{i}} = emit{T, '_mm256_insert_epi32', x, v, i}
def insert{x:T, i, v & w256i{T,64} & knum{i}} = emit{T, '_mm256_insert_epi64', x, v, i}

# blend by sign bit
def blend{f:T, t:T, m:M & w256{T} & w256i{M,32}} = T ~~ emit{[8]f32, '_mm256_blendv_ps', v2f{f}, v2f{t}, v2f{m}}
def blend{f:T, t:T, m:M & w256{T} & w256i{M,64}} = T ~~ emit{[4]f64, '_mm256_blendv_pd', v2d{f}, v2d{t}, v2d{m}}

# mask stuff
def getmask{x:T & w256{T, 32}} = emit{u8, '_mm256_movemask_ps', v2f{x}}
def getmask{x:T & w256{T, 64}} = emit{u8, '_mm256_movemask_pd', v2d{x}}
def andIsZero{x:T, y:T & w256i{T}} = emit{u1, '_mm256_testz_si256', x, y}
def any{x:T & w256i{T}} = getmask{x} != 0 # assumes elements of x all have equal bits (avx2 utilizes this for 16 bits)
def all{x:T & w256i{T}} = getmask{x} == (1<<vcount{T})-1 # same assumption
def anyneg{x:T & w256s{T}} = getmask{x}!=0
