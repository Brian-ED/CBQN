include 'skin/c'
include 'arch/c'

oper infix right ~~ reinterpret 55
def Size = u64
def load{x} = *x

# ceiling divide
def cdiv{a,b} = (a+b-1)/b

# base-2 log of a constant power of two
def lb{n & knum{n} & (n>>1<<1) == n & n>0} = lb{n>>1}+1
def lb{n==1} = 0

def tail{n,x} = x - (x>>n << n) # get the n least significant bits
def bit {k,x} = tail{1,x>>k} << k # get the k-th bit

def rare{x:u1} = emit{u1, '__builtin_expect', x, 0}
def assert{x:u1} = emit{void, 'si_assert', x}


# various checks
def knum{x}    = match{kind{x},'number'}
def isreg{x}   = match{kind{x},'register'}
def isconst{x} = match{kind{x},'constant'}
def istype{x}  = match{kind{x},'type'}
def istup{x}   = match{kind{x},'tuple'}

def isunsigned{T} = isint{T} & ~issigned{T}

def isvec {T} = 0; def isvec {T & istype{T}} = match{typekind{T},'vector'}
def isprim{T} = 0; def isprim{T & istype{T}} = match{typekind{T},'primitive'}


def anyNum{x} = isconst{x} | knum{x}
def anyNum{x:T} = isprim{T}

def anyInt{x} = 0
def anyInt{x & knum{x}} = (x>>0) == x
def anyInt{x & isreg{x}|isconst{x}} = isint{x}

def trunc{T, x:U & isint{T} & isint{U} & T<=U} = emit{T, '', x}
def trunc{T, x & knum{x}} = cast{T, x}

def tern{c, T, F & anyInt{c}} = {
  if(c) T
  else F
}


def ty_s{w== 8} = i8;  def ty_u{w== 8} = u8
def ty_s{w==16} = i16; def ty_u{w==16} = u16
def ty_s{w==32} = i32; def ty_u{w==32} = u32
def ty_s{w==64} = i64; def ty_u{w==64} = u64

def ty_u{T & isprim{T}} = ty_u{width{T}}
def ty_s{T & isprim{T}} = ty_s{width{T}}

def ty_u{T & isvec{T}} = [vcount{T}](ty_u{eltype{T}})
def ty_s{T & isvec{T}} = [vcount{T}](ty_s{eltype{T}})
def ty_u{x:T & isvec{T}} = ty_u{T}~~x
def ty_s{x:T & isvec{T}} = ty_s{T}~~x

def to_el{E, T & isvec{T}} = [width{T}/width{E}]E
def to_el{E, x:T} = to_el{E,T} ~~ x

def unroll{vars,begin,end,block & knum{begin} & knum{end}} = {
  def f{i,l & i==l} = 0
  def f{i,l & i!=l} = {
    exec{i, vars, block}
    f{i+1, l}
  }
  f{begin,end}
}
def collect{vars,begin,end,block & knum{begin} & knum{end}} = {
  def f{i,l & i==l} = tup{}
  def f{i,l & i!=l} = {
    def r = exec{i, vars, block}
    merge{tup{r}, f{i+1, l}}
  }
  f{begin,end}
}
def for{vars,begin,end,block} = {
  i:u64 = begin
  while (i < end) {
    exec{i, vars, block}
    i = i+1
  }
}

def maxvalue{T & T==u8 } = 0xff
def maxvalue{T & T==u16} = 0xffff
def maxvalue{T & T==u32} = 0xffffffff

# tuple operations
def broadcast{T, v & match{typekind{T},'primitive'}} = v
def any{v:T & match{typekind{T},'primitive'}} = v
def anyneg{v:T & match{typekind{T},'primitive'}} = v<0
def iota{n & knum{n}} = @collect(i to n) i
def broadcast{n, v & knum{n}} = @collect(n) v


# debug stuff
def print{x & match{kind{x},'symbol'}} = { emit{void, 'printf', '"%s"', merge{'"', x, '"'}}; x }
def print{x & anyNum{x}} = { emit{void, 'printf', tern{issigned{x}, '"%d"', '"%u"'}, x}; x }
def print{x:T & anyNum{x} & width{T}==64} = { emit{void, 'printf', tern{issigned{x}, '"%ld"', '"%lu"'}, x}; x }
def println{x} = { print{x}; print{'\n'}; x }