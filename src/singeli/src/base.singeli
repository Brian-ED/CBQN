include 'skin/c'
include 'arch/c'

# TODO move these to a more base file
def knum{x} = match{'number',kind{x}}
def trunc{T, x:U & isint{T} & isint{U} & T<=U} = emit{T, '', x}
def ext  {T, x:U & isint{T} & isint{U} & T>=U} = emit{T, '', x}
def trunc{T, x & knum{x}} = cast{T, x}
def ext  {T, x & knum{x}} = cast{T, x}

def cdiv{a,b} = (a+b-1)/b
def rare{x:u1} = emit{u1, '__builtin_expect', x, 0}
def isunsigned{T} = isint{T} & ~issigned{T}
def assert{x:u1} = emit{void, 'si_assert', x}

def cast_p{T, x} = emit{*T, '(void*)', x}


def ty_iu{T & T==i8 } = u8;  def ty_is{T & T==i8 } = u8
def ty_iu{T & T==i16} = u16; def ty_is{T & T==i16} = u16
def ty_iu{T & T==i32} = u32; def ty_is{T & T==i32} = u32
def ty_iu{T & T==i64} = u64; def ty_is{T & T==i64} = u64

def unroll{vars,begin,end,block & knum{begin} & knum{end}} = {
  def f{i,l & i==l} = 0
  def f{i,l & i!=l} = {
    exec{i, vars, block}
    f{i+1, l}
  }
  f{begin,end}
}
def for{vars,begin,end,block} = {
  i:u64 = begin
  while (i < end) {
    exec{i, vars, block}
    i = i+1
  }
}
def forc{F} {vars,begin,end,block} = {
  i:u64 = begin
  while (i < end) {
    exec{i, each{F, vars}, block}
    i = i+1
  }
}

def maxvalue{T & T==u8 } = 0xff
def maxvalue{T & T==u16} = 0xffff
def maxvalue{T & T==u32} = 0xffffffff

# various utilities
def      isintv{T} =      isint{eltype{T}}
def    isfloatv{T} =    isfloat{eltype{T}}
def   issignedv{T} =   issigned{eltype{T}}
def isunsignedv{T} = isunsigned{eltype{T}}
def isvec{T} = match{typekind{T},'vector'}


# non-vector variants of vector defs
def broadcast{T, v & match{typekind{T},'primitive'}} = v
def any{v:T & match{typekind{T},'primitive'}} = v
def anyneg{v:T & match{typekind{T},'primitive'}} = v<0