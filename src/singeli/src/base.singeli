include 'skin/c'
include 'arch/c'
include 'util/kind'

oper ~~ reinterpret infix right 55
oper ** broadcast infix right 55
def Size = u64
def load{x} = *x
def reinterpret{T, x:X & T==X} = x
def exportN{f, ...ns} = each{{n} => export{n, f}, ns}
def exportT{name, fs} = { v:*type{tupsel{0,fs}} = fs; export{name, v} }

config usz = u32

def elwidth{T} = width{eltype{T}}

# more arith
def cdiv{a,b} = (a+b-1)/b # ceiling divide
def cdiv{a,b & knum{a} & knum{b}} = ((a+b-1)/b)>>0
def popc{x:T & isint{T} & width{T}==64} = emit{u8, '__builtin_popcountll', x}
def popc{x:T & isint{T} & width{T}<=32} = emit{u8, '__builtin_popcount', x}
def ctz{x:T & isint{T} & width{T}==64} = emit{u8, '__builtin_ctzll', x}
def ctz{x:T & isint{T} & width{T}<=32} = emit{u8, '__builtin_ctz', x}
def clz{x:T & isint{T} & width{T}==64} = emit{u8, '__builtin_clzll', x}
def clz{x:T & isint{T} & width{T}<=32} = emit{u8, '__builtin_clz', x}

def truncBits{n, v & n<=8}  = cast_i{u8, v}
def truncBits{n, v & n==16} = cast_i{u16, v}
def truncBits{n, v & n==32} = cast_i{u32, v}
def truncBits{n, v & n==64} = cast_i{u64, v}

# base-2 log of a constant power of two
def lb{n & knum{n} & (n>>1<<1) == n & n>0} = lb{n>>1}+1
def lb{n==1} = 0

def zlow{n,x} = (x >> n) << n    # zero out n least significant bits
def tail{n,x} = x & ((1<<n) - 1) # get the n least significant bits
def bit {k,x} = x &  (1<<k)      # get the k-th bit

# Convert tuple to number in little-endian base b
def base{b,l} = { if (0==tuplen{l}) 0; else tupsel{0,l}+b*base{b,slice{l,1}} }

# hints
def rare{x & knum{x}} = x
def rare{x:u1} = emit{u1, '__builtin_expect', x, 0}
def assert{x & x==0} = assert{'failed assertion'}
def assert{x & x==1} = 1
def unreachable{} = emit{void, 'si_unreachable'}
def assert{x:u1} = { if (not x) emit{void, 'si_unreachable'} }

# various checks
def oneType{{h:H, ...t}} = {
  each{{c:C} => assert{C==H}, t}
  H
}
def oneType{{}} = {}

def isreg   = kreg
def isconst = kcon
def istype  = ktyp
def istup   = ktup

def isunsigned{T} = isint{T} & ~issigned{T}

def isvec {T} = 0; def isvec {T & istype{T}} = match{typekind{T},'vector'}
def isprim{T} = 0; def isprim{T & istype{T}} = match{typekind{T},'primitive'}
def isptr {T} = 0; def isptr {T & istype{T}} = match{typekind{T},'pointer'}


def anyNum{x} = isconst{x} | knum{x}
def anyNum{x:T} = isprim{T}

def anyInt{x} = 0
def anyInt{x & knum{x}} = (x>>0) == x
def anyInt{x & isreg{x}|isconst{x}} = isint{x}

# vector width/type checks
def w64 {T}   = 0; def w64 {T   & isvec{T}} = width{T}==64
def w128{T}   = 0; def w128{T   & isvec{T}} = width{T}==128
def w256{T}   = 0; def w256{T   & isvec{T}} = width{T}==256
def w64 {T,w} = 0; def w64 {T,w & w64{T}}   = elwidth{T}==w
def w128{T,w} = 0; def w128{T,w & w128{T}}  = elwidth{T}==w
def w256{T,w} = 0; def w256{T,w & w256{T}}  = elwidth{T}==w

# width+type checks
def genchk{B, F} = {
  def r{T} = 0
  def r{T & B{T}} = F{eltype{T}}
  def r{T,w} = 0
  def r{T,w & B{T}} = F{eltype{T}} & (elwidth{T}==w)
  def r{T & ~isvec{T}} = 0
  r
}
def w256i = genchk{w256, {T} => isint{T}};      def w128i = genchk{w128, {T} => isint{T}};      def w64i = genchk{w64, {T} => isint{T}}
def w256s = genchk{w256, {T} =>   issigned{T}}; def w128s = genchk{w128, {T} =>   issigned{T}}; def w64s = genchk{w64, {T} =>   issigned{T}}
def w256u = genchk{w256, {T} => isunsigned{T}}; def w128u = genchk{w128, {T} => isunsigned{T}}; def w64u = genchk{w64, {T} => isunsigned{T}}
def w256f = genchk{w256, {T} => isfloat{T}};    def w128f = genchk{w128, {T} => isfloat{T}};    def w64f = genchk{w64, {T} => isfloat{T}}





def trunc{T, x:U & isint{T} & isint{U} & T<=U} = emit{T, '', x}
def trunc{T, x & knum{x}} = cast{T, x}

def tern{c, T, F & anyInt{c}} = {
  if(c) T
  else F
}
def tern{c, t:T, f:T & anyInt{c}} = {
  res:T = f
  if (c) res = t
  res
}

# reinterpret vector element type to signed/unsigned
def ty_s{w} = primtype{'i', w}
def ty_u{w} = primtype{'u', w}

def ty_u{T & isprim{T}} = ty_u{width{T}}
def ty_s{T & isprim{T}} = ty_s{width{T}}

def ty_u{T & isvec{T}} = [vcount{T}](ty_u{eltype{T}})
def ty_s{T & isvec{T}} = [vcount{T}](ty_s{eltype{T}})
def ty_u{x:T} = ty_u{T}~~x
def ty_s{x:T} = ty_s{T}~~x

# reinterpret vector as one with element type E
def to_el{E, T & isvec{T}} = [width{T}/width{E}]E
def to_el{E, x:T} = to_el{E,T} ~~ x

# change width of primitive type
def to_w{T, w} = primtype{quality{T}, w}
# double/halve primitive or element type width
def ty_dbl {T & isprim{T}} = to_w{T, width{T}*2}
def ty_half{T & isprim{T}} = to_w{T, width{T}/2}
def ty_dbl {T & isvec{T}} = to_el{ty_dbl {eltype{T}}, T}
def ty_half{T & isvec{T}} = to_el{ty_half{eltype{T}}, T}
# double/halve vector count
def v_dbl {T & isvec{T}} = [vcount{T}*2](eltype{T})
def v_half{T & isvec{T}} = [vcount{T}/2](eltype{T})
# double element width without changing count
def el_dbl {T & isvec{T}} = [vcount{T}](ty_dbl{eltype{T}})
def el_half{T & isvec{T}} = [vcount{T}](ty_half{eltype{T}})

# test if vector has a specific width & element type
def lvec{T, n, w} = 0
def lvec{T, n, w & isvec{T} & vcount{T}==n & elwidth{T}==w} = 1
# type stats
def minvalue{T & isunsigned{T}} = 0
def maxvalue{T & isunsigned{T}} = (1<<width{T})-1
def minvalue{T & issigned{T}} = - (1<<(width{T}-1))
def maxvalue{T & issigned{T}} = (1<<(width{T}-1))-1

# base cases
def andnz{...x} = assert{'andnz not supported', show{...x}}
def topBlend{...x} = assert{'topBlend not supported', show{...x}}
def topMask{...x} = assert{'topMask not supported', show{...x}}
def packLo{...x} = assert{'packLo not supported', show{...x}}
def packHi{...x} = assert{'packHi not supported', show{...x}}
def mul12{...x} = assert{'mul12 not supported', show{...x}}
def unpack{...x} = assert{'unpack not supported', show{...x}}
def unpackLo{...x} = assert{'unpackLo not supported', show{...x}}
def unpackHi{...x} = assert{'unpackHi not supported', show{...x}}
def unpackQ{...x} = assert{'unpackQ not supported', show{...x}}
def packQ{...x} = assert{'packQ not supported', show{...x}}
def __mulhi{...x} = assert{'__mulhi not supported', show{...x}}
def fold_addw{...x} = assert{'fold_addw not supported', show{...x}}
def vfold{...x} = assert{'vfold not supported', show{...x}}
def narrowPair{...x} = assert{'narrowPair not supported', show{...x}}
def pair{...x} = assert{'pair not supported', show{...x}}
def cvt{...x} = assert{'cvt not supported', show{...x}}
def shuf{...x} = assert{'shuf not supported', show{...x}}
def shuf16Lo{...x} = assert{'shuf16Lo not supported', show{...x}}
def shuf16Hi{...x} = assert{'shuf16Hi not supported', show{...x}}
def homAll{...x} = assert{'homAll not supported', show{...x}}
def homAny{...x} = assert{'homAny not supported', show{...x}}
def homMask{...x} = assert{'homMask not supported', show{...x}}
def andAllZero{...x} = assert{'andAllZero not supported', show{...x}}
def loadLow{...x} = assert{'loadLow not supported', show{...x}}
def storeLow{...x} = assert{'storeLow not supported', show{...x}}
def sel{...x} = assert{'sel not supported', show{...x}}
def make{...x} = assert{'make not supported', show{...x}}
def half{...x} = assert{'half not supported', show{...x}}
def topMaskStore{...x} = assert{'topMaskStore not supported', show{...x}}
def homMaskStore{...x} = assert{'homMaskStore not supported', show{...x}}
def topMaskStoreF{...x} = assert{'topMaskStoreF not supported', show{...x}}
def homMaskStoreF{...x} = assert{'homMaskStoreF not supported', show{...x}}
def widen{...x} = assert{'widen not supported', show{...x}}
def narrow{...x} = assert{'narrow not supported', show{...x}}
def unord{...x} = assert{'unord not supported', show{...x}}
def floor{...x} = assert{'floor not supported', show{...x}}
def loadBatchBit{...x} = assert{'loadBatchBit not supported', show{...x}}
def b_getBatch{...x} = assert{'b_getBatch not supported', show{...x}}
def extract{...x} = assert{'extract not supported', show{...x}}
def abs{...x} = assert{'abs not supported', show{...x}}
def homBlend{...x} = assert{'homBlend not supported', show{...x}}

def andnot{a, b & anyNum{a} & anyNum{b}} = a & ~b
oper &~ andnot infix none 35
def widen{T, x:X & T==X} = x
def narrow{T, x:X & T==eltype{X}} = x
def undefPromote{T, x:X & T==X} = T~~x
def packQ{{a, b}} = packQ{a, b}
def pair{{a, b}} = pair{a, b}
def cvt{T, x:X & T==eltype{X}} = x

def min{a, b & anyNum{a} & anyNum{b}} = tern{a<b, a, b}
def max{a, b & anyNum{a} & anyNum{b}} = tern{a>b, a, b}

def homMask{...vs & tuplen{vs}>1} = {
  def n = tuplen{vs}
  def T = oneType{vs}
  def RT = ty_u{max{8,vcount{T}*n}}
  tree_fold{|, each{{v,i}=>promote{RT,homMask{v}}<<(i*vcount{T}), vs, iota{n}}}
}
def homMaskX{a:T} = tup{1, homMask{a}} # tup{n,mask}; mask with each bit repeated n times
def ctzX{{n,v}} = ctz{v}/n # ctz for a result of homMaskX

def inRangeLen{x:TS, start, count & issigned{eltype{TS}}} = { # ∊ [start;start+count)
  def TU = ty_u{TS}
  (TU~~(x-TS**start))  <  TU**count
}
def inRangeLen{x:TU, start, count & isunsigned{eltype{TU}}} = { # ∊ [start;start+count)
  def TS = ty_s{TU}
  def h = 1 << (elwidth{TU}-1)
  (TS~~(x-TU**(start-h)))  <  TS**(count-h)
}
def inRangeIncl{x:T, start, end} = inRangeLen{x, start, end-start+1} # ∊ [start;end]
def inRangeExcl{x:T, start, end} = inRangeLen{x, start, end-start} # ∊ [start;end)


# tuple operations
def broadcast{T, v & isprim{T}} = v
def iota{n & knum{n}} = @collect(i to n) i
def broadcast{n, v & knum{n}} = @collect(n) v

def arch_defvw = tern{hasarch{'AVX2'}, 256, 128}
def has_simd = hasarch{'X86_64'} | hasarch{'AARCH64'}


def load{p,i & kgen{p}} = p{i}
def store{p,i,x & kgen{p}} = p{i,x}
def tptr{l,s} = { # create "pointer" generator with given load & store definitions
  def r{i} = l{i}
  def r{i,x} = s{i,x}
}

def unroll{vars,begin,end,iter & knum{begin} & knum{end}} = {
  def f{i,l & i==l} = 0
  def f{i,l & i!=l} = {
    iter{i, vars}
    f{i+1, l}
  }
  f{begin,end}
}
def collect{vars,begin,end,iter & knum{begin} & knum{end}} = {
  def f{s,e & s==e} = tup{}
  def f{s,e & s<e} = {
    def m = s + ((e-s)>>1)
    def r0 = f{s, m}
    merge{r0, f{m, e}}
  }
  def f{s,e & s+1==e} = tup{iter{s, vars}}
  f{begin,end}
}
def for{vars,begin,end,iter} = {
  i:u64 = begin
  while (i < end) {
    iter{i, vars}
    ++i
  }
}
def forNZ{vars,begin,end,iter} = {
  i:u64 = begin
  assert{i!=end}
  while (i < end) {
    iter{i, vars}
    ++i
  }
}
def forUnroll{exp,unr}{vars,begin,end,iter} = {
  i:u64 = begin
  while ((i+unr) <= end) {
    iter{each{{j}=>i+j, iota{unr}}, vars}
    i+= unr
  }
  if (unr==2) { if (i!=end) iter{tup{i}, vars} }
  else if (unr>1) {
    if (exp) {
      def stop = makelabel{}
      each{{j} => {
        if (i+j >= end) goto{stop}
        iter{tup{i+j}, vars}
      }, iota{unr}}
      setlabel{stop}
    } else {
      @for(j from i to end) iter{tup{j}, vars}
    }
  }
}
def forXUnroll{unr}{vars,begin,end,iter} = {
  @forUnroll{unr}(is from begin to end) each{{i} => iter{i, vars}, is}
}


def makeBranch{Ts, F} = {
  def args = undef{Ts}
  def skip = makelabel{}; goto{skip}
  def start = setlabel{}
  F{...args}
  setlabel{skip}
  {...vs} => { each{=, args, vs}; goto{start} }
}
def makeOptBranch{enable, Ts, F} = if (enable) makeBranch{Ts, F} else 'not defined'


def tree_fold{F, x} = {
  def h = tuplen{x}>>1
  F{tree_fold{F, slice{x,0,h}}, tree_fold{F, slice{x,h,tuplen{x}}}}
}
def tree_fold{F, {x}} = x

def eachx{F, ...args} = {
  def l = tree_fold{max, each{{x} => {if(ktup{x}) tuplen{x}; else 0}, args}}
  each{F, ...each{{x} => {if (istup{x}) x; else l**x}, args}}
}

def undef{T, n & istype{T}} = @collect(n) undef{T}
def undef{Ts & istup{Ts}} = each{undef, Ts}
def undef{x:T} = undef{T}
def undef{T & istype{T}} = { reg:=undefined{T} }
