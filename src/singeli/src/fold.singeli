include './base'
include './sse3'
include './avx'
include './avx2'
include './mask'

fold_idem{T==f64, op}(x:*T, len:u64) : T = {
  def step = 256/width{T}
  def V = [step]T
  xv:= *V ~~ x
  r:V = broadcast{[4]f64, 0}
  if (len < step) {
    # Can't overlap like the long case
    assert{len > 0}
    r = load{xv}
    if (len > 1) {
      if (len > 2) r = op{r, shuf{[4]u64, r, 4b2222}}
                   r = op{r, shuf{[4]u64, r, 4b1111}}
    }
  } else {
    # Pairwise combination to shorten dependency chains
    def pairwise{p, i, k} = {
      def l = k-1
      op{pairwise{p, i       , l},
         pairwise{p, i+(1<<l), l}}
    }
    def pairwise{p, i, k==0} = load{p, i}
    def pk = 2  # Combine 1<<pk values in a step
    r = load{*V ~~ (x+len-step)}
    e:= (len-1)/step
    f:= e >> pk
    @for (i to f) r = op{r, pairwise{xv+(i<<pk), 0, pk}}
    @for (xv over i from f<<pk to e) r = op{r, xv}
    r = op{r, shuf{[4]u64, r, 4b2301}}
    r = op{r, shuf{[4]u64, r, 4b1032}}
  }
  extract{r, 0}
}

'avx2_fold_min_f64' = fold_idem{f64,min}
'avx2_fold_max_f64' = fold_idem{f64,max}
