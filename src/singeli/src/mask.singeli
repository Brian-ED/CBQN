# get mask of first n items; n>0 & n<vcount{T}

def maskInit{w, T} = {
  def n = w/width{T} - 1
  merge{broadcast{n, -1}, broadcast{n, 0}}
}
def maskInit1{w} = {
  apply{merge, each{{x} => {
    merge{broadcast{w/8-1, 255}, (1<<x)-1, broadcast{w/8, 0}}
  }, iota{8}}}
}
mask256_8 :*i8  = maskInit{256,i8 }; mask128_8 :*i8  = maskInit{128,i8 }
mask256_16:*i16 = maskInit{256,i16}; mask128_16:*i16 = maskInit{128,i16}
mask256_32:*i32 = maskInit{256,i32}; mask128_32:*i32 = maskInit{128,i32}
mask256_64:*i64 = maskInit{256,i64}; mask128_64:*i64 = maskInit{128,i64}
mask256_1 :*u8  = maskInit1{256};    mask128_1 :*u8  = maskInit1{128}


def maskOf{T,n & w256{T, 8}} = load{*[32]u8  ~~ (mask256_8  + (n^31))}
def maskOf{T,n & w256{T,16}} = load{*[16]u16 ~~ (mask256_16 + (n^15))}
def maskOf{T,n & w256{T,32}} = load{*[ 8]u32 ~~ (mask256_32 + (n^7))}
def maskOf{T,n & w256{T,64}} = load{*[ 4]u64 ~~ (mask256_64 + (n^3))}
def maskOfBit{T,n & w256{T}} = load{*[32]u8  ~~ (mask256_1  + (n>>3)^31 + 64*(n&7))}

def maskOf{T,n & w128{T, 8}} = load{*[16]u8  ~~ (mask128_8  + (n^15))}
def maskOf{T,n & w128{T,16}} = load{*[ 8]u16 ~~ (mask128_16 + (n^7))}
def maskOf{T,n & w128{T,32}} = load{*[ 4]u32 ~~ (mask128_32 + (n^3))}
def maskOf{T,n & w128{T,64}} = load{*[ 2]u64 ~~ (mask128_64 + (n^1))}
def maskOfBit{T,n & w128{T}} = load{*[16]u8  ~~ (mask128_1  + (n>>3)^15 + 32*(n&7))}

def anyne{x:T, y:T, M & M{0}==0 & isvec{T}} = ~all{x==y}
def anyne{x:T, y:T, M & M{0}==1 & isvec{T}} =  any{M{x!=y}}
def anyne{x:T, y:T, M & M{0}==0 & anyInt{x}} = x!=y
def anyne{x:T, y:T, M & M{0}==1 & anyInt{x}} = M{x^y} != 0
def anyneBit{x:T, y:T, M} = ~M{x^y, 'all bits zeroes'}

def maskNone{x} = x
def maskNone{x, mode=='all bits zeroes'} = andIsZero{x, x}
def maskAfter{n} = {
  def mask{x:X & isvec{X}} = x & (X~~maskOf{X,n})
  def mask{x:X & anyInt{x}} = x & ((1<<n) - 1)
  def mask{x:X, mode=='all bits zeroes'} = andIsZero{x, X~~maskOfBit{X,n}}
  def mask{X, mode=='to sign bits'} = maskOf{X,n}
  def mask{mode=='count'} = n
  def mask{x==0} = 1
}



# store low packed elements of x to P; TODO the w parameter isn't doing much?
def storeLow{ptr:P, w, x:T & width{eltype{P}} == width{eltype{T}}} = store{*T~~ptr, 0, x}
def storeLow{ptr:P, w, x:T & w256{T} & w==64} = store{*u64~~ptr, 0, extract{[4]u64~~x, 0}}

# store vcount{T} items into the n'th batch of ptr elements, compressing the items if needed; masked by M
def storeBatch{ptr:P, n, x:T, M} = {
  def rpos = ptr + n*vcount{T}
  def E0 = eltype{P}
  xu:= ucvt{E0, x}
  def TF = to_el{E0, T}
  if (M{0}) maskstoreF{*TF~~rpos, M{TF, 'to sign bits'}, 0, xu}
  else storeLow{rpos, vcount{T}*width{E0}, xu}
}

# (sign/zero)-extend n'th batch of vcount{T} elements of P into elements of T
def loadBatch{ptr:P, n, T} = {
  def rpos = ptr + n*vcount{T}
  def E0 = eltype{P}
  
  if (width{eltype{T}} == width{E0}) load{*T ~~ rpos}
  else cvt{E0, T, load{*[16]u8 ~~ rpos}}
}

def maskedLoop{bulk, l, step} = {
  m:u64 = l/bulk
  @for (i to m) step{i, maskNone}
  
  left:= l & (bulk-1)
  if (left!=0) step{m, maskAfter{left}}
}
