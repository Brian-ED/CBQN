include './base'
if (hasarch{'AVX2'}) {
  include './sse'
  include './avx'
  include './avx2'
} else if (hasarch{'X86_64'}) {
  include './sse2'
} else if (hasarch{'AARCH64'}) {
  include './neon'
}
include './mask'

def findFirst{C, M, F, ...v1} = {
  def exit = makelabel{}
  def args = undef{M{...each{{c}=>tupsel{0,c}, v1}}}
  def am = tuplen{tupsel{0,v1}}
  each{{last, ...v2} => {
    if (last or C{...v2}) {
      each{=, args, M{...v2}}
      goto{exit}
    }
  }, iota{am} == am-1, ...v1}
  unreachable{}
  setlabel{exit}
  F{...args}
}

fn search{A, E}(l:*void, e0:A, n:u64) : u64 = {
  def e = if (A==E) e0 else cast_i{E, e0}
  def bulk = arch_defvw/width{E}
  def VT = [bulk]E
  def end = makeBranch{
    tup{u64, ty_u{VT}},
    {i,c} => return{i*bulk + promote{u64, ctz{homMask{c}}}}
  }
  
  muLoop{bulk, tern{arch_defvw>=256, 1, 2}, n, {is, M} => {
    eq:= eachx{==, loadBatch{*E~~l, is, VT}, VT**e}
    if (homAny{M{tree_fold{|, eq}}}) {
      findFirst{
        {i,c} => homAny{c},
        {i,c} => tup{i,c},
        end,
        is, eq
      }
    }
  }}
  n
}

export{'simd_search_u8',  search{u64, u8}}
export{'simd_search_u16', search{u64, u16}}
export{'simd_search_u32', search{u64, u32}}
export{'simd_search_f64', search{f64, f64}}