def w128{T} = 0
def w128{T & isvec{T}} = width{T}==128

local def wgen128{F} = {
  def r{T} = 0
  def r{T & w128{T}} = F{eltype{T}}
  def r{T,w} = 0
  def r{T,w & w128{T}} = F{eltype{T}} & (width{eltype{T}}==w)
  def r{T & ~isvec{T}} = 0
  r
}
def w128{T,w} = 0
def w128{T,w & w128{T}} = width{eltype{T}}==w
def w128i = wgen128{{T} => isint{T}}
def w128s = wgen128{{T} => isint{T} &   issigned{T}}
def w128u = wgen128{{T} => isint{T} & isunsigned{T}}
def w128f = wgen128{{T} => isfloat{T}}

def v2i{x:T & w128{T}} = [16]u8 ~~ x # for compact casting for the annoying intrinsic type system
def v2f{x:T & w128{T}} = [4]f32 ~~ x
def v2d{x:T & w128{T}} = [2]f64 ~~ x


# load & store
def load {a:T, n & w128i{eltype{T}   }} = emit{eltype{T}, '_mm_loadu_si128',       a+n}
def loada{a:T, n & w128i{eltype{T}   }} = emit{eltype{T}, '_mm_load_si128',        a+n}
def load {a:T, n & w128f{eltype{T},64}} = emit{eltype{T}, '_mm_loadu_pd', *f64 ~~ (a+n)}
def loada{a:T, n & w128f{eltype{T},64}} = emit{eltype{T}, '_mm_load_pd',  *f64 ~~ (a+n)}
def load {a:T, n & w128f{eltype{T},32}} = emit{eltype{T}, '_mm_loadu_ps', *f32 ~~ (a+n)}
def loada{a:T, n & w128f{eltype{T},32}} = emit{eltype{T}, '_mm_load_ps',  *f32 ~~ (a+n)}
def store {a:T, n, v & w128i{eltype{T}   }} = emit{void, '_mm_storeu_si128',       a+n,  v}
def storea{a:T, n, v & w128i{eltype{T}   }} = emit{void, '_mm_store_si128',        a+n,  v}
def store {a:T, n, v & w128f{eltype{T},64}} = emit{void, '_mm_storeu_pd', *f64 ~~ (a+n), v}
def storea{a:T, n, v & w128f{eltype{T},64}} = emit{void, '_mm_store_pd',  *f64 ~~ (a+n), v}
def store {a:T, n, v & w128f{eltype{T},32}} = emit{void, '_mm_storeu_ps', *f32 ~~ (a+n), v}
def storea{a:T, n, v & w128f{eltype{T},32}} = emit{void, '_mm_store_ps',  *f32 ~~ (a+n), v}

# broadcast
def broadcast{T, v & w128i{T,  8}} = emit{T, '_mm_set1_epi8',  promote{eltype{T},v}}
def broadcast{T, v & w128i{T, 16}} = emit{T, '_mm_set1_epi16', promote{eltype{T},v}}
def broadcast{T, v & w128i{T, 32}} = emit{T, '_mm_set1_epi32', promote{eltype{T},v}}
def broadcast{T, v & w128i{T, 64}} = emit{T, '_mm_set1_epi64x',promote{eltype{T},v}}
def broadcast{T, v & w128f{T, 64}} = emit{T, '_mm_set1_pd', v}
def broadcast{T, v & w128f{T, 32}} = emit{T, '_mm_set1_ps', v}

def make{T==[2]f64,a,b} = emit{T,'_mm_setr_pd',a,b}
def make{T==[4]f32,a,b,c,d} = emit{T,'_mm_setr_ps',a,b,c,d}

def makeGen{T,s,x} = apply{emit, merge{tup{T,s}, each{{c}=>promote{eltype{T},c}, x}}}
def make{T,a,b & w128i{T,64}} = makeGen{T, '_mm_set_epi64x', tup{b,a}} # yay no _mm_setr_epi64x
def make{T,a,b,c,d & w128i{T,32}} = makeGen{T, '_mm_setr_epi32', tup{a,b,c,d}}
def make{T,a,b,c,d,e,f,g,h & w128i{T,16}} = makeGen{T, '_mm_setr_epi16', tup{a,b,c,d,e,f,g,h}}
def make{T,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p & w128i{T,8}} = makeGen{T, '_mm_setr_epi8', tup{a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p}}
def make{T,x & w128{T} & istup{x}} = apply{make, merge{tup{T}, x}}

def iota{T & w128{T,64}} = make{T,0,1}
def iota{T & w128{T,32}} = make{T,0,1,2,3}
def iota{T & w128{T,16}} = make{T,0,1,2,3,4,5,6,7}
def iota{T & w128{T,8}} = make{T,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}

# bit arith
def __xor{a:T, b:T & w128i{T}} = T ~~ emit{[4]f32, '_mm_xor_ps', v2f{a}, v2f{b}}
def __and{a:T, b:T & w128i{T}} = T ~~ emit{[4]f32, '_mm_and_ps', v2f{a}, v2f{b}}
def __or {a:T, b:T & w128i{T}} = T ~~ emit{[4]f32, '_mm_or_ps',  v2f{a}, v2f{b}}
def __not{a:T & w128u{T}} = a ^ broadcast{T, ~cast{eltype{T},0}}

# signed comparison
def __eq{a:T,b:T & T==[16]i8 } = emit{[16]u8,  '_mm_cmpeq_epi8',  a, b}
def __eq{a:T,b:T & T==[ 8]i16} = emit{[ 8]u16, '_mm_cmpeq_epi16', a, b}
def __eq{a:T,b:T & T==[ 4]i32} = emit{[ 4]u32, '_mm_cmpeq_epi32', a, b}
def __gt{a:T,b:T & T==[16]i8 } = emit{[16]u8,  '_mm_cmpgt_epi8',  a, b}
def __gt{a:T,b:T & T==[ 8]i16} = emit{[ 8]u16, '_mm_cmpgt_epi16', a, b}
def __gt{a:T,b:T & T==[ 4]i32} = emit{[ 4]u32, '_mm_cmpgt_epi32', a, b}
def __lt{a:T,b:T & w128s{T}} = b>a
def __ge{a:T,b:T & w128s{T}} = ~(b>a)
def __le{a:T,b:T & w128s{T}} = ~(a>b)
# unsigned comparison
def __eq{a:T,b:T & T==[16]u8 } = emit{[16]u8,  '_mm_cmpeq_epi8',  a, b}
def __eq{a:T,b:T & T==[ 8]u16} = emit{[ 8]u16, '_mm_cmpeq_epi16', a, b}
def __eq{a:T,b:T & T==[ 4]u32} = emit{[ 4]u32, '_mm_cmpeq_epi32', a, b}
def __le{a:T,b:T & w128u{T}} = a==min{a,b}
def __ge{a:T,b:T & w128u{T}} = a==max{a,b}
def __lt{a:T,b:T & w128u{T}} = ~(a>=b)
def __gt{a:T,b:T & w128u{T}} = ~(a<=b)
# rest of comparison
def __ne{a:T,b:T & w128i{T}} = ~(b==a)


# shift
def __shl{a:T,b & w128i{T, 16} & knum{b}} = emit{T, '_mm_slli_epi16', a, b}
def __shl{a:T,b & w128i{T, 32} & knum{b}} = emit{T, '_mm_slli_epi32', a, b}
def __shl{a:T,b & w128i{T, 64} & knum{b}} = emit{T, '_mm_slli_epi64', a, b}
def __shr{a:T,b & w128u{T, 16} & knum{b}} = emit{T, '_mm_srli_epi16', a, b}
def __shr{a:T,b & w128u{T, 32} & knum{b}} = emit{T, '_mm_srli_epi32', a, b}
def __shr{a:T,b & w128u{T, 64} & knum{b}} = emit{T, '_mm_srli_epi64', a, b}
def __shr{a:T,b & w128s{T, 16} & knum{b}} = emit{T, '_mm_srai_epi16', a, b}
def __shr{a:T,b & w128s{T, 32} & knum{b}} = emit{T, '_mm_srai_epi32', a, b}
# no 64-bit arithmetic shift :/

def min{a:T,b:T & T==[ 8]i16} = emit{T, '_mm_min_epi16', a, b}; def max{a:T,b:T & T==[ 8]i16} = emit{T, '_mm_max_epi16', a, b}
def min{a:T,b:T & T==[16]u8 } = emit{T, '_mm_min_epu8',  a, b}; def max{a:T,b:T & T==[16]u8 } = emit{T, '_mm_max_epu8',  a, b}


# shuffle stuff
def shuf{L, x:T, n & w128{T} & w128i{L, 32} & knum{n}} = T ~~ emit{[4]i32, '_mm_shuffle_epi32', v2i{x}, n}
def sel{L, x:T, i:[16]i8 & w128{T} & w128{L, 8}} = T ~~ emit{[16]u8, '_mm_shuffle_epi8', v2i{x}, i}

# arith
def __add{a:T,b:T & w128i{T,  8}} = emit{T, '_mm_add_epi8',  a, b}
def __add{a:T,b:T & w128i{T, 16}} = emit{T, '_mm_add_epi16', a, b}
def __add{a:T,b:T & w128i{T, 32}} = emit{T, '_mm_add_epi32', a, b}
def __add{a:T,b:T & w128i{T, 64}} = emit{T, '_mm_add_epi64', a, b}

def __sub{a:T,b:T & w128i{T,  8}} = emit{T, '_mm_sub_epi8',  a, b}
def __sub{a:T,b:T & w128i{T, 16}} = emit{T, '_mm_sub_epi16', a, b}
def __sub{a:T,b:T & w128i{T, 32}} = emit{T, '_mm_sub_epi32', a, b}
def __sub{a:T,b:T & w128i{T, 64}} = emit{T, '_mm_sub_epi64', a, b}


# mask stuff
def getmask{x:T & w128{T, 8}} = emit{u32, '_mm_movemask_epi8', x}
def getmask{x:T & w128{T, 16}} = getmask{emit{[16]u8, '_mm_packs_epi16', x, broadcast{[8]u16, 0}}}
def getmask{x:T & w128{T, 32}} = emit{u8, '_mm_movemask_ps', v2f{x}}
def getmask{x:T & w128{T, 64}} = emit{u8, '_mm_movemask_pd', v2d{x}}
def any{x:T & w128i{T}} = getmask{x} != 0 # assumes elements of x all have equal bits (avx2 utilizes this for 16 bits)
def all{x:T & w128i{T}} = getmask{x} == (1<<vcount{T})-1 # same assumption
def anyneg{x:T & w128s{T}} = getmask{x}!=0
def any{x:T & w128i{T, 16}} = getmask{[32]u8 ~~ x}!=0
def all{x:T & w128i{T, 16}} = getmask{[32]u8 ~~ x} == (1<<32)-1
def anyneg{x:T & w128s{T, 16}} = getmask{[32]u8 ~~ (([16]i16~~x) < broadcast{[16]i16, 0})}!=0

# the lone SSE2 extract
def extract{x:T, i & w128i{T,16} & knum{i}} = emit{eltype{T}, '_mm_extract_epi16', x, i}

# debug stuff
local def printGen{x, s, n} = apply{emit, merge{tup{void, 'printf', merge{'"', apply{merge,each{{c}=>{if(c>0) merge{',',s}; else s}, iota{n}}}, '"'}}, each{{c}=>extract{x,c}, iota{n}}}}
def print{x:T & isvec{T}} = printGen{x, printfType{eltype{T}}, vcount{T}}



### SSE4.1; TODO either move to own file or rename this file

# rest of extract
def extract{x:T, i & w128i{T, 8} & knum{i}} = emit{eltype{T}, '_mm_extract_epi8',  x, i}
def extract{x:T, i & w128i{T,32} & knum{i}} = emit{eltype{T}, '_mm_extract_epi32', x, i}
def extract{x:T, i & w128i{T,64} & knum{i}} = emit{eltype{T}, '_mm_extract_epi64', x, i}

# conversion
def cvt{F,      T,         a:A & eltype{T}==F} = T~~a
def cvt{F==i8,  T==[8]i16, a:A & w128i{A}} = emit{T, '_mm_cvtepi8_epi16', a}
def cvt{F==i8,  T==[4]i32, a:A & w128i{A}} = emit{T, '_mm_cvtepi8_epi32', a}
def cvt{F==i16, T==[4]i32, a:A & w128i{A}} = emit{T, '_mm_cvtepi16_epi32', a}

# mask stuff
def andIsZero{x:T, y:T & w128i{T}} = emit{u1, '_mm_testz_si128', x, y}

# blend by sign bit; no 16-bit case
def blend{f:T, t:T, m:M & w128{T} & w128i{M,32}} = T ~~ emit{[4]f32, '_mm_blendv_ps', v2f{f}, v2f{t}, v2f{m}}
def blend{f:T, t:T, m:M & w128{T} & w128i{M,64}} = T ~~ emit{[2]f64, '_mm_blendv_pd', v2d{f}, v2d{t}, v2d{m}}
def blend{f:T, t:T, m:M & w128{T} & w128i{M, 8}} = T ~~ emit{[16]i8, '_mm_blendv_epi8', v2i{f}, v2i{t}, v2i{m}}

# assumes all bits are the same in each mask item
def blendF{f:T, t:T, m:M & w128{T} & w128{M} & width{eltype{M}}!=16} = blend{f, t, m}
def blendF{f:T, t:T, m:M & w128{T} & w128{M,16}} = blend{f, t, [16]i8,m}

def min{a:T,b:T & T==[16]i8 } = emit{T, '_mm_min_epi8',  a, b}; def max{a:T,b:T & T==[16]i8 } = emit{T, '_mm_max_epi8',  a, b}
def min{a:T,b:T & T==[ 4]i32} = emit{T, '_mm_min_epi32', a, b}; def max{a:T,b:T & T==[ 4]i32} = emit{T, '_mm_max_epi32', a, b}
def min{a:T,b:T & T==[ 8]u16} = emit{T, '_mm_min_epu16', a, b}; def max{a:T,b:T & T==[ 8]u16} = emit{T, '_mm_max_epu16', a, b}
def min{a:T,b:T & T==[ 4]u32} = emit{T, '_mm_min_epu32', a, b}; def max{a:T,b:T & T==[ 4]u32} = emit{T, '_mm_max_epu32', a, b}

def __eq{a:T,b:T & T==[ 2]i64} = emit{[ 2]u64, '_mm_cmpeq_epi64', a, b}
def __eq{a:T,b:T & T==[ 2]u64} = emit{[ 2]u64, '_mm_cmpeq_epi64', a, b}



# SSE4.2
def __gt{a:T,b:T & T==[ 2]i64} = emit{[ 2]u64, '_mm_cmpgt_epi64', a, b}