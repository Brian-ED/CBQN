include './base'
include './cbqnDefs'
include './f64'
if (hasarch{'X86_64'}) {
  include './sse3'
  include './avx'
  include './avx2'
} else if (hasarch{'AARCH64'}) {
  include './neon'
}
include './mask'
include './bitops'

# Group l (power of 2) elements into paired groups of length o
# e.g. pairs{2, iota{8}} = {{0,1,4,5}, {2,3,6,7}}
def pairs{o, x} = {
  def i = iota{tuplen{x}/2}
  def g = 2*i - i%o
  tupsel{tup{g, g+o}, x}
}
def unpack_pass{o, x} = merge{...each{unpackQ, ...pairs{o, x}}}

def vtranspose{x & tuplen{x}==8 & type{tupsel{0,x}}==[8]i32 & hasarch{'X86_64'}} = {
  def t1 = unpack_pass{1, x}
  def t2 = unpack_pass{2, t1}
  def t2pairs = pairs{4, t2}
  def h{p} = each{{a,b}=>emit{[8]i32, '_mm256_permute2f128_si256', a,b,p}, ...t2pairs}
  merge{h{16b20}, h{16b31}}
}

def vtranspose{x & tuplen{x}==4 & type{tupsel{0,x}}==[4]i64 & hasarch{'X86_64'}} = {
  def t1 = unpack_pass{1, x}
  def t2pairs = pairs{2, t1}
  def h{p} = each{{a,b}=>emit{[8]i32, '_mm256_permute2f128_si256', a,b,p}, ...t2pairs}
  merge{h{16b20}, h{16b31}}
}



fn transpose{T, k}(r0:*void, x0:*void, w:u64, h:u64) : void = {
  rp:*T = *T~~r0
  xp:*T = *T~~x0
  def VT = [k]T

  def for_mult{k}{vars,begin,end,block} = {
    assert{begin == 0}
    @for (i to end/k) exec{k*i, vars, block}
  }

  # Cache line info
  def line_bytes = 64
  def line_elts = line_bytes / (width{T}/8)
  def line_vecs = line_bytes / (width{VT}/8)
  
  if (h&(line_elts-1) != 0) {
    @for_mult{k} (y to h) {
      @for_mult{k} (x to w) {
        xpo:= xp + y*w + x
        rpo:= rp + x*h + y
        def xvs = each{{i}=>load{*VT~~(xpo+i*w), 0}, iota{vcount{VT}}}
        def rvs = vtranspose{xvs}
        each{{i,v}=>store{*VT~~(rpo+i*h), 0, v}, iota{vcount{VT}}, rvs}
      }    
    }
  } else {
    # Result rows are aligned with each other so it's possible to
    # write a full cache line at a time
    # This case is here to mitigate cache associativity problems at
    # at multiples of 256 or so, but it's faster whenever it applies
    def store_line{p, vs} = each{bind{store,p}, iota{line_vecs}, vs}
    def get_lines{loadx} = {
      def vt{i} = vtranspose{each{loadx, k*i + iota{k}}}
      each{tup, ...each{vt, iota{line_vecs}}}
    }
    ro := tail{6, -u64~~r0} / (width{T}/8)  # Offset to align within cache line; assume elt-aligned
    wh := w*h
    yn := h
    if (ro != 0) {
      ra := line_elts - ro
      y := h - ra
      rpo := rp + y  # Cache aligned
      rpe := rpo + (w-1)*h
      # Part of first and last result row aren't covered by the split loop
      def trtail{dst, src, len} = @for (i to len) store{dst, i, load{src, w*i}}
      trtail{rp, xp, ro}
      trtail{rpe, xp + y*w + w-1, ra}
      # Transpose first few rows and last few rows together
      @for_mult{k} (x to w) {
        o := w*y + x
        def loadx{_} = {
          l:=load{*VT~~(xp+o)}
          o+=w; if (o>wh-k) o -= wh-1  # Jump from last source row to first, shifting right 1
          l
        }
        def rls = get_lines{loadx}  # 4 rows of 2 vectors each
        each{{i,v} => {if (i<3 or rpo<rpe) store_line{*VT~~rpo, v}; rpo+=h}, iota{k}, rls}
      }
      --yn  # One strip handled
    }
    @for_mult{line_elts} (y0 to yn) { y := y0 + ro
      @for_mult{k} (x to w) {
        xpo:= xp + y*w + x
        rpo:= rp + x*h + y
        def rls = get_lines{{i} => load{*VT~~(xpo+i*w), 0}}
        each{{i,v} => store_line{*VT~~(rpo+i*h), v}, iota{k}, rls}
      }
    }
  }
  
  def base = if (T==i32) 'base_transpose_i32' else 'base_transpose_i64'
  if (w%k) emit{void, base, rp+h*(w-w%k), xp+  (w-w%k), w%k,   h,   w, h}
  if (h%k) emit{void, base, rp+  (h-h%k), xp+w*(h-h%k), w-w%k, h%k, w, h}
}

export{'simd_transpose_i32', transpose{i32, 8}}
export{'simd_transpose_i64', transpose{i64, 4}}
