include './base'
include './cbqnDefs'
include './f64'
if (hasarch{'X86_64'}) {
  include './sse3'
  include './avx'
  include './avx2'
} else if (hasarch{'AARCH64'}) {
  include './neon'
}
include './mask'
include './bitops'

# Group l (power of 2) elements into paired groups of length o
# e.g. pairs{2, iota{8}} = {{0,1,4,5}, {2,3,6,7}}
def pairs{o, x} = {
  def i = iota{tuplen{x}/2}
  def g = 2*i - i%o
  tupsel{tup{g, g+o}, x}
}
def unpack_pass{o, x} = merge{...each{unpackQ, ...pairs{o, x}}}
def permute_pass{o, x} = {
  def p = pairs{o, x}
  def h{s} = each{{a,b}=>emit{[8]i32, '_mm256_permute2f128_si256', a,b,s}, ...p}
  merge{h{16b20}, h{16b31}}
}
def unpack_to{f, l, x} = {
  def pass = if (f) permute_pass else unpack_pass
  pass{l, if (l==1) x else unpack_to{0, l/2, x}}
}
# Last pass for square kernel packed in halves
def shuf_pass{x} = each{{v} => shuf{[4]i64, v, 4b3120}, x}

# Square kernel where width is a full vector
def transpose_square{VT, l, x & hasarch{'X86_64'}} = unpack_to{1, l/2, x}

def load2{a:T, b:T & w128i{eltype{T}}} = {
  def V = eltype{T}
  emit{[2*vcount{V}](eltype{V}), '_mm256_loadu2_m128i', b, a}
}
def store2{a:T, b:T, v:T2 & w128i{eltype{T}} & w256{T2}} = {
  each{{p, i} => store{p, 0, half{v, i}}, tup{a,b}, iota{2}}
}
def load_k {VT, src,    l, w & w256{VT}} = each{{i}  =>load {*VT~~(src+i*w), 0   }, iota{l}}
def store_k{VT, dst, x, l, h & w256{VT}} = each{{i,v}=>store{*VT~~(dst+i*h), 0, v}, iota{l}, x}
def load_k {VT, src,    l, w & w128{VT}} = each{{i}  =>{p:=src+  i*w; load2 {*VT~~p, *VT~~(p+l*w)   }}, iota{l}}
def store_k{VT, dst, x, l, h & w128{VT}} = each{{i,v}=>{p:=dst+2*i*h; store2{*VT~~p, *VT~~(p+  h), v}}, iota{l}, x}

# Transpose kernel of size kw,kh in size w,h array
def kernel{src:P, dst:P, kw, kh, w, h} = {
  def T = eltype{P}
  def n = (kw*kh*width{T}) / 256             # Number of vectors
  def xvs = load_k{[kw]T, src, n, w}
  def xt  = unpack_to{n==kh, n/2, xvs}       # Transpose n by n
  def rvs = if (n==kw) xt else shuf_pass{xt} # To kh by kh for packed square
  store_k{[kh]T, dst, rvs, n, h}
}


def for_mult{k}{vars,begin,end,block} = {
  assert{begin == 0}
  @for (i to end/k) exec{k*i, vars, block}
}

def mat_at{rp,xp,w,h}{x,y} = tup{xp + y*w + x, rp + x*h + y}

def transpose_kernels{kw, kh, rp, xp, w, h} = {
  @for_mult{kh} (y to h) {
    @for_mult{kw} (x to w) {
      kernel{...mat_at{rp,xp,w,h}{x,y}, kw, kh, w, h}
    }
  }
}

# Scalar transpose defined in C
def call_base{T} = {
  def ts = if (T==i8) 'i8' else if (T==i16) 'i16' else if (T==i32) 'i32' else 'i64'
  {...a} => emit{void, merge{'base_transpose_',ts}, ...a}
}
def small_transpose_out{T, k, rp, xp, w, h} = {
  if (w<k or h<k) { call_base{T}{rp, xp, w, h, w, h}; return{} }
}
def edge_transpose{T, k, rp, xp, w, h} = {
  def tr{...a} = call_base{T}{...a, w, h}
  wo := w%k; ws := w-wo; if (wo) tr{rp+h*ws, xp+  ws, wo, h }
  ho := h%k; hs := h-ho; if (ho) tr{rp+  hs, xp+w*hs, ws, ho}
}

fn transpose{T, k}(r0:*void, x0:*void, w:u64, h:u64) : void = {
  rp:*T = *T~~r0
  xp:*T = *T~~x0
  small_transpose_out{T, k, rp, xp, w, h}
  def VT = [k]T
  
  # Cache line info
  def line_bytes = 64
  def line_elts = line_bytes / (width{T}/8)
  def line_vecs = line_bytes / (width{VT}/8)
  
  if (line_elts > 2*k or h&(line_elts-1) != 0) {
    # Main transpose
    transpose_kernels{k, k, rp, xp, w, h}
  } else {
    # Result rows are aligned with each other so it's possible to
    # write a full cache line at a time
    # This case is here to mitigate cache associativity problems at
    # at multiples of 256 or so, but it's faster whenever it applies
    def store_line{p, vs} = each{bind{store,p}, iota{line_vecs}, vs}
    def get_lines{loadx} = {
      def vt{i} = transpose_square{VT, k, each{loadx, k*i + iota{k}}}
      each{tup, ...each{vt, iota{line_vecs}}}
    }
    ro := tail{6, -u64~~r0} / (width{T}/8)  # Offset to align within cache line; assume elt-aligned
    wh := w*h
    yn := h
    if (ro != 0) {
      ra := line_elts - ro
      y := h - ra
      rpo := rp + y  # Cache aligned
      rpe := rpo + (w-1)*h
      # Part of first and last result row aren't covered by the split loop
      def trtail{dst, src, len} = @for (i to len) store{dst, i, load{src, w*i}}
      trtail{rp, xp, ro}
      trtail{rpe, xp + y*w + w-1, ra}
      # Transpose first few rows and last few rows together
      @for_mult{k} (x to w) {
        o := w*y + x
        def loadx{_} = {
          l:=load{*VT~~(xp+o)}
          o+=w; if (o>wh-k) o -= wh-1  # Jump from last source row to first, shifting right 1
          l
        }
        def rls = get_lines{loadx}  # 4 rows of 2 vectors each
        each{{i,v} => {if (i<3 or rpo<rpe) store_line{*VT~~rpo, v}; rpo+=h}, iota{k}, rls}
      }
      --yn  # One strip handled
    }
    @for_mult{line_elts} (y0 to yn) { y := y0 + ro
      @for_mult{k} (x to w) {
        {xpo,rpo} := mat_at{rp,xp,w,h}{x, y}
        def rls = get_lines{{i} => load{*VT~~(xpo+i*w), 0}}
        each{{i,v} => store_line{*VT~~(rpo+i*h), v}, iota{k}, rls}
      }
    }
  }
  
  edge_transpose{T, k, rp, xp, w, h}
}

fn transpose{T, k, m==2}(r0:*void, x0:*void, w:u64, h:u64) : void = {
  rp:*T = *T~~r0
  xp:*T = *T~~x0
  small_transpose_out{T, k, rp, xp, w, h}
  def d = m*k
  
  transpose_kernels{k, d, rp, xp, w, h}
  
  if ((h & k) != 0) { y := h-h%d
    @for_mult{k} (x to w) {
      kernel{...mat_at{rp,xp,w,h}{x,y}, k, k, w, h}
    }
  }
  
  edge_transpose{T, k, rp, xp, w, h}
}

export{'simd_transpose_i8',  transpose{i8 , 16}}
export{'simd_transpose_i16', transpose{i16, 8, 2}}
export{'simd_transpose_i32', transpose{i32, 8}}
export{'simd_transpose_i64', transpose{i64, 4}}
